var express = require("express");
var app = express();
var httpServer = require('http').createServer(app);
var io = require('socket.io')(httpServer, {
  cors: {
    origin: '*',
  }
});

var say = require('say');

let queue = [];
let speaking = false;

function processQueue() {
  if (queue.length > 0 && !speaking) {
    speaking = true;
    let msg = queue.shift();
    say.speak(msg.text, msg.voice, msg.speed, (err) => {
      if (err) {
        console.error('Error while saying message:', err);
      }
      speaking = false;
      processQueue();
    });
  }
}

function addToQueue(text, voice, speed) {
  queue.push({ text, voice, speed });
  processQueue();
}

// Serve static files from the "public" directory
app.use(express.static('public'));

io.on('connection', (socket) => {
  console.log('A client connected');

  // Listen for incoming messages on the 'call-customer' event
  socket.on('call-customer', (data) => {
    console.log(data);
    try {
      let obj;
      if(typeof data === 'object') {
        obj = data;
      } else {
        obj = JSON.parse(data);
      }
      var counterNumber = obj.counterNumber;
      var ticketNumber = obj.ticketNumber;

      var msg='';
      var voice='';
      var speed='';
 
      msg = `Calling customer number ${ticketNumber}. Proceed to counter ${counterNumber} please.`;
      voice = 'Microsoft David Desktop';
      speed = 0.8;

      addToQueue(msg, voice, speed);



      // Broadcast the data to all connected clients except the sender
      var jsonString = JSON.stringify(data);
      socket.broadcast.emit('call-customer', jsonString);
    } catch (error) {
      console.error('Error processing call-customer data:', error);
    }
  });
});

httpServer.listen(3000, () => {
  console.log('Listening on port 3000');
});
